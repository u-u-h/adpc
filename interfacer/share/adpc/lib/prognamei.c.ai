/* =========================================================================

   @PROJECT_NAME@ @PROJECT_VERSION@

   @PROJECT_VERSIONINFO@

========================================================================= */

#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include "config.h"
#include "options.h"
#include "adplib.h"
#include "@PROJECT_NAME@.h"

/* ====================================================================== 
   Reset mode 
   ====================================================================== */

@C_RESET_MODE@

/* ====================================================================== 
   Init default values
   ====================================================================== */

@C_INIT_DEFAULTS@

/* ====================================================================== 
   Process arguments   
   ====================================================================== */

static void process_args(toptions *opt, char interactive, int argc, char **argv) {
  int   c;
  char  manopt, manoptmode;

  opterr = 0; optind = 1;

  pcolor(opt->colored_output,COLOR_BLUE);
  while ((c = getopt (argc, argv, "@C_GETOPTSTRING@")) != -1) {
    switch (c) {

@C_PROCESS_ARGS@      

      case '?':
        if (interactive) printf("Unknown option '-%c'. Type -h for more information.\n", optopt);
        else {
          fprintf (stderr, "%s: unknown option `-%c'.\nTry '%s -h' for more information.\n", argv[0], optopt, argv[0]);
          exit(1);
        }
        break;
      default:
        abort ();
      }
  }
  pcolor(opt->colored_output,COLOR_DEFAULT);
}

/* ====================================================================== 
   Print settings
   ====================================================================== */

@C_PRINT_SETTINGS@

/* ====================================================================== 
   Main interface
   ====================================================================== */

int main (int argc, char **argv) {
  toptions   *opt;
  tsequence  *seq;
  treadseq   *rs        = NULL; 
  ttokenizer *tokenizer = NULL;
  char       *command;

  opt = (toptions *) calloc(1,sizeof(toptions));

  init_defaults(opt);
  process_args(opt, 0, argc, argv);

  if (!opt->terminate) {
    if (optind < argc)               rs = readseq_open(READSEQ_STRING, argv[optind]);
    else if (opt->@C_FILENAMEVAR@)         rs = readseq_open(READSEQ_FILE,   opt->@C_FILENAMEVAR@);
    else if (!isatty(fileno(stdin))) rs = readseq_open(READSEQ_STDIN,  NULL);
    else {
      printf("@PROJECT_INTERACTIVEMESSAGE@", argv[0]);
      rl_init();
      opt->interactive = 1;
      opt->colored_output = 1 - opt->colored_output;
      tokenizer = tokenizer_new();
      rs = readseq_open(READSEQ_STRING, "");
    } 

    while (1) {
      if (opt->interactive) {
        if (opt->colored_output) 
          printf("%s@PROJECT_INTERACTIVECOMMANDLINE@%s",COLOR_RED,COLOR_DEFAULT);
        else 
	  printf("@PROJECT_INTERACTIVECOMMANDLINE@");
        command = rl_gets();

        if (!command || (command[0] == '@') || ((command[0] == ':') && (command[1] == 'q'))) {
          pcolor(opt->colored_output,COLOR_BLUE);
          printf("Leaving @PROJECT_NAME@.");
          pcolor(opt->colored_output,COLOR_DEFAULT);
          printf("\n");
          exit(0);
        }
        else if (command[0] == ':') {
          pcolor(opt->colored_output,COLOR_BLUE);
          if (command[1] == 's') print_settings(opt);
          if (command[1] == 'd') {
            init_defaults(opt);
            opt->colored_output = 1;
            opt->interactive = 1;
            printf("Activated default configuration.\n");
            pcolor(opt->colored_output,COLOR_DEFAULT);
          }
          if (command[1] == 'e') {
            system(command + 2);
          }
          if (command[1] == 'r') {
            system("make update");
            system("./@PROJECT_NAME@");
            exit(0); 
          }
        }
        else if (command[0] == '-') {
          tokenizer_exec(tokenizer, argv[0], command);
          process_args(opt, 1, tokenizer->count, tokenizer->token);
          if (opt->@C_FILENAMEVAR@) { 
            rs = readseq_free(rs);
            rs = readseq_open(READSEQ_FILE, opt->@C_FILENAMEVAR@);
          }
          free(opt->@C_FILENAMEVAR@);
          opt->@C_FILENAMEVAR@ = NULL;
        }
        else {
          rs = readseq_free(rs);
          rs = readseq_open(READSEQ_STRING, command);
        }
      }

      while (1) {
        seq = readseq_next_@C_READSEQNEXT@(rs);
        if (!(seq->success)) break;
@C_MODULESTART@
        sequence_free(seq);
      }

      if (!opt->interactive) break;
    }
  }
  exit(0);
}
